#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var serialport = require('serialport');
var inquirer = require('inquirer');
var pkg = require('../package.json');
var serverMain = require('../index');

var util = require('util')
var exec = require('child_process').exec;

var sleep = require('sleep');
var now = require("performance-now")
var gpio = require('onoff').Gpio,
sensePin = new gpio(4, 'in', 'both',{debounceTimeout: 50});  // Define GPIO pin on Raspberry Pi


var options = {};

program
    .version(pkg.version)
    .usage('-s <secret> -p <port> [options]')
    .option('-l, --list', 'list available ports then exit')
    .option('-s, --secret', 'the secret key stored in the ~/.cncrc file')
    .option('-p, --port <port>', 'path or name of serial port')
    .option('-b, --baudrate <baudrate>', 'baud rate (default: 115200)', 115200)
    .option('--socket-address <address>', 'socket address or hostname (default: localhost)', 'localhost')
    .option('--socket-port <port>', 'socket port (default: 8000)', 8000)
    .option('--controller-type <type>', 'controller type: Grbl|Smoothie|TinyG (default: Grbl)', 'Grbl')
    .option('--access-token-lifetime <lifetime>', 'access token lifetime in seconds or a time span string (default: 30d)', '30d')

program.parse(process.argv);

var options = {
    secret: program.secret,
    list: program.list,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime
};

if (options.list) {
    console.log("Available ports:");
    serialport.list().then(
        ports => {
            ports.forEach(function(port) {
                console.log(port.path);
            });
        },
        err => {
            console.error(err);
            process.exit(1);
        }
    );
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

var savedState={};

var isRunning=function(){
    //socket.emit('write', options.port, "?");
    return(store.controller.state.status.activeState=='Run');

};

var wasRunning=function(){
    //socket.emit('write', options.port, "?");
    return(savedState.status.activeState=='Run');

};

var createServer = function(options) {
    // Server Connection
    serverMain(options, function(err, socket) {
        // Grbl
        socket.on('Grbl:state', function(state) {
            store.controller.state = state;
        });
        socket.on('Grbl:settings', function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on('Smoothie:state', function(state) {
            store.controller.state = state;
        });
        socket.on('Smoothie:settings', function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on('TinyG:state', function(state) {
            store.controller.state = state;
        });
        socket.on('TinyG:settings', function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on('sender:status', function(data) {
            store.sender.status = data;
        });
    });


    sensePin.watch((err, value) => {
        if(err){
            throw err;
        }
        if(value){
            // power is up again. Resume
            if(wasRunning()){
                //Resume
                pauseDuration=now()-pausedAt;
                if(pauseDuration<1000) sleep.msleep(Math.floor(1000-pauseDuration));
                socket.emit('write', options.port, "~");
            }
            
        }else{
            // power is out. Save state
            savedState=store.controller.state;
            //console.log(savedState);
            if(isRunning()){
                //Pause
                pausedAt=now();
                socket.emit('write', options.port, "!");
            }

        }
    });

};

if (options.port) {
    createServer(options);
    return;
}


serialport.list().then(
    ports => {
        const choices = ports.map(function(port) {
            return port.path;
        });

        inquirer.prompt([{
            type: 'list',
            name: 'port',
            message: 'Specify which port you want to use?',
            choices: choices
        }]).then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
    },
    err => {
        console.error(err)
        process.exit(1);
    }
);

// Clean Proccess Kill
process.on('SIGINT', function () {
    sensePin.unexport();
});
